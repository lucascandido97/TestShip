name: Continuous Integration

on:
    push:
        branches:
            - main
    pull_request:

jobs:
    build-backend-image:
        name: Build Backend Image
        runs-on: ubuntu-latest
        outputs:
            docker-image: ${{ steps.docker_meta.outputs.tags }}
        permissions: 
          pull-requests: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Setup up Docker Buildx
              uses: docker/setup-buildx-action@v2
              
            - name: Login to Docker Hub
              uses: docker/login-action@v2
              with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Docker metadata
              id: docker_meta
              uses: docker/metadata-action@v4
              with:
                images: ${{ secrets.DOCKER_USERNAME }}/backend
                tags: ${{ github.event_name == 'push' && github.ref_name == 'main' && 'production' || 'buildstage' }}_${{ github.head_ref }}_${{ github.sha }}
                labels: |
                  org.example.team=QA Engineer
                  org.example.project=TestShip
                  org.example.environment=${{ github.event_name == 'push' && 'Production' || 'Development' }}
                  org.example.event=${{ github.event_name }}
                  org.example.merge=${{ github.event_name == 'push' && 'true' || 'false' }}
                  org.example.pull_request=${{ github.event_name == 'pull_request' && 'true' || 'false' }}

            - name: Docker build
              uses: docker/build-push-action@v2
              with: 
                context: ./backend
                cache-from: type=gha
                cache-to: type=gha,mode=max
                push: true
                tags: $${{ steps.docker_meta.outputs.tags }}
                labels: ${{ steps.docker_meta.outputs.labels }}
                target: ${{ github.event_name == 'pull_request' && 'build' || 'production' }}
                build-args: |
                  NODE_ENV=${{ github.event_name == 'push' && 'production' || 'development' }}

            - name: Update Pull Request with Docker Info
              if: ${{ github.event_name == 'pull_request' }}
              uses: actions/github-script@v6
              with:
                script: |
                  const prNumber = context.payload.pull_request.number;
                  const dockerTags = `${{ steps.docker_meta.outputs.tags }}`;
                  const dockerLabels = `${{ steps.docker_meta.outputs.labels }}`;
                  const bodyUpdate = `
                  ### Docker Build Information
                  - **Tags:** ${dockerTags}
                  - **Labels:** ${dockerLabels}
                  `;
                  const { data: pullRequest } = await github.pulls.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber,
                  });
                  const updatedBody = `${pullRequest.body || ''}\n\n${bodyUpdate}`;
                  await github.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber,
                    body: updatedBody,
                  });
    
            - name: Run Trivy for all CVEs (non-blocking)
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: ${{ secrets.DOCKER_USERNAME }}/backend:${{ steps.docker_meta.outputs.tags }}
                format: table
                exit-code: 0
    
    unit-testing:
      name: Unit Testing in Docker
      runs-on: ubuntu-latest
      needs: build-backend-image    
      
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

    integration-testing:
      name: Integration Testing in Docker
      runs-on: ubuntu-latest
      needs: build-backend-image

      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Run integration tests
          run: |
            docker run --rm ${{ secrets.DOCKER_USERNAME }}/backend:${{ steps.docker_meta.outputs.tags }} npm test -- --watchAll=false --testPathPattern=integration-tests

    e2e-testing:
      name: E2E Testing in Docker
      runs-on: ubuntu-latest
      needs: build-backend-image

      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Run e2e tests
          run: |
            docker run --rm ${{ secrets.DOCKER_USERNAME }}/backend:${{ steps.docker_meta.outputs.tags }} npm test -- --watchAll=false --testPathPattern=e2e-tests
